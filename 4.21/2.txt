#include <stdio.h>
#include <stdlib.h>

typedef struct DListNode
{
    char data;
    struct DListNode* prev, *next;
}DListNode;

typedef struct
{
    DListNode* H;
}DListType;

void init(DListType* DL)
{
    DL->H=NULL;
}

void insertFirst(DListType* DL, char e)
{
    DListNode* node = (DListNode*)malloc(sizeof(DListNode));
    DListNode* p =DL->H;
    node->data = e;
    node->prev = NULL;
    node->next = p;
    DL->H = node;
    
    if(p!=NULL)
        p->prev = node;
}

void insert(DListType* DL, int pos, char e)
{
    DListNode* node = (DListNode* )malloc(sizeof(DListNode));
    DListNode* p=DL->H;
    
    if(pos==1)
        insertFirst(DL,e);
    else
    {
        for(int i =1; i <pos; i++)
        p = p->next;
    }
    
    node->data=e;
    node->prev=p->prev;
    node->next=p;
    node->prev->next = node;
    p->prev = node;
}

char delete(DListNode* H,int pos)
{
    DListNode* p=H;
    for(int i =1; i <pos; i++)
        p = p->next;
        
    char e = p->data;
    p->prev->next = p->next;
    p->next->prev = p->prev;
    free(p);
    return e;
}

void print(DListType* DL)
{
    for(DListNode* p =DL->H; p!=NULL; p= p->next)
        printf("%c <=>", p->data);
    printf("\b\b\b     \n");
}

int main()
{
    DListType DL;
    init(&DL);
    
    insertFirst(&DL, 'A'); print(&DL);
    insertFirst(&DL, 'B'); print(&DL);
    insertFirst(&DL, 'C'); print(&DL);
    getchar();
    
    insert(&DL, 2,'D'); print(&DL);
    insert(&DL, 1,'E'); print(&DL);
    insert(&DL, 3,'F'); print(&DL);
    
    return 0;
}
