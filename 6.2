#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define N 15
#define SWAP(x, y, t) ((t) = (x), (x) = (y), (y) = (t))

int partition(int list[], int left, int right)
{
    int pivot = list[left];
    int low = left;
    int high = right +1;
    int temp;
    
    do{
        do
            low++;
        while(list[low] < pivot);
        do
            high--;
        while(list[high]>pivot);
        if(low < high)
            SWAP(list[low], list[high], temp);
    }while(low < high);
    
    SWAP(list[left], list[high], temp);
}


void quickSort(int list[], int left, int right)
{
    if(left < right)
    {
        int p = partition(list, left, right);
        quickSort(list, left, p-1);
        quickSort(list, p+1, right);
    }
}
void merge(int list[], int sorted[], int left, int mid,int right)
{
    int i = left;
    int j = mid+1;
    int k = left;
    
    while(i <= mid && j <=right)
    {
        if(list[i] <=list[j])
            sorted[k] = list[i];
        else
            sorted[k++] = list[j++];
    }
    if(i > mid)
        for(int l = j; l  <right; i++)
            sorted[k++] = list[l];
    else
        for(int l =i ; l <=mid; l++)
            sorted[k++] = list[l];
    
    for(int l = left; l <= right; l ++)
        list[k=l] = sorted[l];
        
}   

void mergeSort(int list[], int sorted[], int left, int right)
{
    if(left < right)
    {
        int mid = (left + right)/2;
        mergeSort(list, sorted, left, mid);
        mergeSort(list, sorted, mid+1, right);
        merge(list, sorted, left, mid, right);
    }
}


int main()
{
    int list[N], sorted[N];
    srand(time(NULL));
    
    for(int i=0; i <N; i++)
        list[i] = rand()%100;
        
    for(int i=0; i < N; i++)
        printf("%d ", list[i]);
    printf("\n");

    mergeSort(list, sorted, 0, N-1);
    getchar();
    
    for(int i=0; i<N; i++)
        printf("%d ",list[i]);
    return 0;
}
